03/07/2013:
set up programs and directories, set up ssh and remotely used pdp
matt@sapc321:~/programs/DomFOLD$ java runPDP /home/matt/data/CASP10_server_models/T0651/IntFOLD2_TS1 /home/matt/data/CASP10_server_models/T0651.fasta > /home/matt/data/T0651_IntFOLD2_TS1_dom_pred.dat
read an online ontro to Java

04/07/2013:
started to read Java book "An Introduction to Object-Oriented Programming"
made first hello world:
class hello_world
{
    public static void main(String[] args)
    {
        System.out.println("Hello, world!");
    }
}

worked on understanding OOP (was new to me) and getting the basics of Java down
wrote pseudocode for the domain cutting program

05/07/2013:
*/
To associate FileOutputStream to the ouput:
	FileOutputStream outStream = new FileOutputStream(DomCut1);
To create a file object:
	File DomCut1 = new File("Dom1.dat");
To actually write the new data:
	outStream.write(line of code from ATOM file);
Close the stream:
	outStream.close();
/* - ignore - can use FileWriter instead? - As far as I can tell, FileWriter is for strings, FileOutputStream is for raw bytes?
May use BufferedReader to input line by line of pdp file

UPDATE: Have created a script that can read in each line from the pdp file and print it to the screen:
// Program to import PDB file for each structure prediction and cut it into domains according to the pdp file

// Import packages
import java.io.*;

// Main code
public class DomCutter {
        public static void main(String[] args) throws IOException {
        //File StructPredFile = new File("~/project/data/CASP10_server_models/T0651", "IntFOLD2_TS1");
        //File DomPredFile = new File("~/project/data/CASP10_dom_preds/", "T0651_IntFOLD2_TS1_dom_pred.dat");
                BufferedReader DomPredFile = new BufferedReader(new FileReader("/home/matt/project/data/CASP10_dom_preds/T0651_IntFOLD2_TS1_dom_pred.dat"));
                String residue_dom;
                while ((residue_dom = DomPredFile.readLine()) != null) {
                        System.out.println(residue_dom);
                }
        }
}

// Tested and it works! However, I need to know the line number of the line I'm reading - may need a different method
UPDATE: using line counters for both files and an if statement to check the line number is the same. Now working on exporting each line to a document with that domain number in the title

Now have a program which in theory does what I want, but it throws up errors (see after):

// Program to import PDB file for each structure prediction and cut it into domains according to the pdp file

// Import packages
import java.io.*;

// Main code
public class DomCutter {
        public static void main(String[] args) throws IOException {
        //File StructPredFile = new File("~/project/data/CASP10_server_models/T0651", "IntFOLD2_TS1");
        //File DomPredFile = new File("~/project/data/CASP10_dom_preds/", "T0651_IntFOLD2_TS1_dom_pred.dat");
                BufferedReader DomPredFile = new BufferedReader(new FileReader("/home/matt/project/data/CASP10_dom_preds/T0651_IntFOLD2_TS1_dom_pred.dat"));
                BufferedReader StructPredFile = new BufferedReader(new FileReader("/home/matt/project/data/CASP10_server_models/T0651/IntFOLD_TS1"));
                String outfile_name = StructPredFile.getName();
                String residue_dom;
                String atom_coordinate;
                int pdp_line_num = 0;
                while ((residue_dom = DomPredFile.readLine()) != null) {
                        //System.out.println(residue_dom);
                        pdp_line_num++;
                        int struct_line_num = 0;
                        while ((atom_coordinate = StructPredFile.readLine()) != null) {
                                struct_line_num++;
                                if (struct_line_num == pdp_line_num) {
                                        //File output = new File(outfile_name + residue_dom + ".dat";
                                        //if (!output.exists()) {
                                        //      output.createNewFile();
                                        //}
                                        Writer output = new BufferedWriter(new FileWriter(outfile_name + residue_dom + ".dat", true));
                                        if (!output.exists()) {
                                                output.createNewFile();
                                        }
                                        output.write(atom_coordinate);
                                        output.close();
                                }
                                //output.close();
                        }
                }
        }
}

//commented-out lines were left in in-case I still need them
//compiling errors:

matt@sapc88:~/project$ javac DomCutter.java
DomCutter.java:13: error: cannot find symbol
		String outfile_name = StructPredFile.getName();
		                                    ^
  symbol:   method getName()
  location: variable StructPredFile of type BufferedReader
DomCutter.java:29: error: cannot find symbol
					if (!output.exists()) {
					           ^
  symbol:   method exists()
  location: variable output of type Writer
DomCutter.java:30: error: cannot find symbol
                                                output.createNewFile();
                                                      ^
  symbol:   method createNewFile()
  location: variable output of type Writer
3 errors

06/07/2013:

Read entire chapter on Java I/O classes, edited code to make it better
Still have an error showing up that I can't solve:

DomCutter.java:11: error: cannot find symbol
		String output_name = StructPredFile.getName();
		                                   ^
  symbol:   method getName()
  location: variable StructPredFile of type BufferedReader
1 error

07/07/2013:
Done more reading on my error, still can't solve it - will have to ask Liam to take a look
Read more on Java standard classes, error handling and learnt some vim commands because it's better for programming than nano

08/07/2013:
Error solved: I was using .getName() on something I couldn't use it on. Solved several other errors and now have working code! Produces three text files for the three domains
Changed the output so it goes to a new folder for the split domains
Now need to change the code so it take the file names as args, then it can be called for all files in a dir
Also did some more reading on Java syntax and string handling
got more used to vim and its commands (and its incessant beeping...)
the working code:

// Program to import PDB file for each structure prediction and cut it into domains according to the pdp file

// Import packages
import java.io.*;

// Main code
public class DomCutter {
        public static void main(String[] args) throws IOException {
                BufferedReader DomPredFile = new BufferedReader(new FileReader("/home/matt/project/data/CASP10_dom_preds/T0651_IntFOLD2_TS1_dom_pred.dat"));
                String residue_dom;
                String atom_coordinate;
                int pdp_line_num = 0;
                while ((residue_dom = DomPredFile.readLine()) != null) {
                        if (!residue_dom.isEmpty()) {
                                pdp_line_num++;
                                int struct_line_num = 0;
                                BufferedReader StructPredFile = new BufferedReader(new FileReader("/home/matt/project/data/CASP10_server_models/T0651/IntFOLD_TS1"));
                                while ((atom_coordinate = StructPredFile.readLine()) != null) {
                                        struct_line_num++;
                                        if (struct_line_num == pdp_line_num) {
                                                File output = new File("/home/matt/project/data/split_doms/" + "IntFOLD_TS1" + "_" + residue_dom + ".dat");
                                                if (!output.exists()) {
                                                        output.createNewFile();
                                                }
                                                BufferedWriter writedata = new BufferedWriter(new FileWriter(output, true));
                                                writedata.write(atom_coordinate + "\n");
                                                writedata.close();
                                        }
                                }
                        }
                }
        }
}
UPDATE: finished editing code so that the files could be passed as arguments, then realised the structure predictions are listed by atom, but the domain prediction is by residue - AHHHHHHHHHHHHH!
Will look at it later this evening. The obvious fix seems to be to take the substring for each atom residue number and compare it to the line count of the domain prediction file
 - the problem with this is the substring range will change when the res number goes into tens, then hundreds etc.
Getting new error for the substring method:
matt@sapc88:~/project$ java DomCutter T0651_IntFOLD2_TS1_dom_pred.dat IntFOLD_TS1
Exception in thread "main" java.lang.StringIndexOutOfBoundsException: String index out of range: 26
	at java.lang.String.substring(String.java:1907)
	at DomCutter.main(DomCutter.java:23)

Other than that, the code should work when this error is solved!

09/07/2013
Problem solved and code fixed - the string.substring() section wasn't working for the start and end lines because they didn't contain a long enough string. I caught the exceptions and usde an if statement to only use the lines that begin with "ATOM". (I could probably skip the of statement if I'm catching all exceptions here? Might change this later)
Started looking into bash scripts

10/072013

18/07/2013
Found the easiest way to rsync between home and sapc88 is to ssh into reading then rsync to my own laptop at seafloor@82.30.66.59 (that's the router ip, I setup port forwarding for ssh)
rsync -avz seafloor@82.30.66.59:/Users/seafloor/Documents/QA_T0644-T0669 /home/matt/project/data/

22/07/2013
Spent time looking for the best majority vote algorithm
The linear time majority vote algorithm by Boyer and Moore  (http://www.cs.utexas.edu/users/moore/best-ideas/mjrty/index.html) look fast but only works if a variable has a majority by n/2 or greater, which I can't garantee in a poorly modeled region of a protein. As such, the algorithm may be quite slow. I'll create one, but a lot of time should be spent trying to optimise it later on in my project.

30/07/2013
about to incorporate ModFOLDclust2 into the code - will do it on each folder, which will contain the different models for that domain 
The code to call it is: java -jar ModFOLDclust2.jar T0659 /home/matt/project/data/CASP10_server_models/T0659.fasta /home/matt/project/data/CASP10_server_models/T0659/

13/08/2013
The line for calling TM-score on a file is "java -jar TMscore.jar model native". e.g. "java -jar TMscore.jar /home/matt/Dropbox/Part\ 3\ Project/project/data/CASP10_server_models/T0651/IntFOLD2_TS1 /home/matt/Dropbox/Part\ 3\ Project/project/data/CASP10_full_structures_official/T0651.pdb >IntFOLD2_TS1_GDT.txt"

14/08/2013
writing a shell script to call TM-score program on all models in a directory

15/08/2013
shell script done and working - run on model T0651 full chain and split domains. Wille be analysed in R soon.

16/08/2013
Starting running code on different models. Bug detected when running on T0717 - was deleting files its shouldn't be -- fixed. Must remember that ArrayLists need to declare the data type e.g. ArrayList<String>. Another problem occured - T0717 is 'officially' discontinuous, but the consensus predicted from runPDP was continuous. Only the highest ranking model was discontinuous - will check T0726 too as this is should also be discontinous.

19/08/2013
Fixed the splitting of and checking of fasta file - wasn't working for discontinuous proteins. Added an if statement for when the file exists to append or not, and to add the header or not.

20/08/2013
Compiled a list of all TBM-hard, FM and multi-domain models and started testing code on them.

21/08/2013
Finished going through all the models above (there were a lot) and noted all mistakes. Notes are pasted below:

T0649 (TBM-hard) – 210. Actual is D1: 27-210. Worked fine, but was only 1 domain
T0651 - 120, 78, 147. Actual is D1: 1-95, D2: 111-221, D3: 222-254. Correct domain number, wrong domain sizes
T0652 – prediction discontinuous, despite actual structure not being discontinuous. Predicted as -, 1, 2, -, with numbers 62, 139, 81, 10. Actual is D1: 50-190 and D2: 201-283 (only 2 domains). Implies pdp needs fixing, alternative used or a new method because when pdp is unsure of the domain (-) it can create artificial discontinuous domains.
T0653 (TBM-hard/FM) – 148, 266. Actual is D1: 22-414 (only 1 domain). 4 of the 10 pdp predictions even gave 3 domains, while the rest gave 2 domains. Again a possible problem.
T0657 (TBM) – 154. Actual is D1: 4-17,23-44,51-68,71-149. Missing the gaps.
T0658 – 184, 357. Actual is D1: (FM) 20-185, D2: (TBM) 186-540. Quite accurate domain splitting.
T0663 (TBM) – 70, 73, 62 (doms 1, 2 and 3). Actual is D1: 53-138, D2: 139-204. Gives a discontinuous prediction with 3 domains, while actual is continuous with only 2 domains.  However, it correctly split the ATOM and fasta file. Found a bug in fasta file cutter – the size of the extra discontinuous segments need to be added to the header.
T0666 (FM) - 195. Actual is D1: 1-195.
T0671 – 255, 173. Actual is D1: 38-125, D2 (TBM-hard): 126-428. Size is completely wrong!
T0674 – 148, 192. D1: 46-206, D2: 207-340. ID’ed as discontinuous again despite being continuous. 
T0675 – 38, 37. Actually D1: 17-43, D2: 44-73. ID’ed the correct number of domains but incorrectly labeled them as ‘-‘ and 1 instead of 1 and 2.
T0676 – (TBM-hard) 204. Actually is D1: 32-204
T0677 – 59, 57, 37. Actually is D1: 4-20,31-57, D2: 66-100,105-141. Incorrect number of domains.
T0678 (TBM-hard) – 161. Actual is D1: 2-161.
T0684 – 270. Actual is D1: 24-96, D2 (FM): 97-264. All pdp predictions only gave 1 domain (1 had some ‘-‘, but the consensus was all 1s)
T0685 – 210, 43. Actual is D1: 45-116, D2: 117-253. Incorrectly identified as discontinuous. Also clearly incorrect domain sizes.
T0686 – 214, 45. Actual is D1: 17-178,182-204, D2: 210-259. Correct no. of domains, quite accurate size of domains.
T0690 – 183, 210. Actual is D1: 1-120, D2 (TBM-hard): 221-377, Fairly accurate sizes
T0693 – 138, 72, 109. Actual is D1 (FM): 1-100, D2: 101-319. Incorrectly ID’ed as discontinuous, and as 3 domains (actually 2 domains).
T0695 – 132, 160, 65, 97, 18, 64. Actual is D1 (FM): 1-535. Completely ridiculous domain prediction - consensus prediction
11111111111111111111111111111111111111111111------------------------------------------111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333333333333333333----------------------44444444444444444444444444444444444444444444444444444444411111111111111111111111111111111144444444444444444444444444444444444444442222222222222222222222255555555555555555511111111111111111111111112222222222222
T0704 – 254. Actual is D1: 17-106,109-160,162-250
T0705 – 428, 46. Actual is D1: 35-130, D2: 131-474. Dom sizes completely wrong, but correct number of domains.
T0706 – 206, 11. Actual is D9: 14-117,120-163,173-217? Think 9 was a typo on the site – should say 1? Had two domains (- and 1), but if ‘-‘ is ignored then it is correct – bring sup the question (again) of whether ‘-‘ should be a separate domain or not assigned to a domain at all.
T0713 – 129, 107, 485, 1, 17. Actual is D1: 33-207, D2: 208-406. Domains in were 1, 2, 3, 4, -. Clearly another problem with pdp – it shouldn’t allow a 1AA domain to exist!
T0717 – 120, 78, 147. Actual is D1: 25-37,220-345, D2: 54-219. Should be discontinuous but not identified as such.
T0719 – 103, 111, 108, 93, 119, 158, 34. Actual is D1: 39-133, D2: 134-249, D3: 257-356, D4: 357-448, D5: 449-563, D6: 564-726. Correct number of domains if you ignore ‘-‘.
T0724 – 249, 16 as domains 1 and -. Actual is D1: 3-128, D2: 129-243. Identified as 1 domain (ignoring -) – should be 2.
T0726 – 172, 103, 172, 150. Actual is D1: 1-447, D2: 484-564, D3: 448-483, 565-587
T0732 – 273, 81. Actual is D1: 6-262, D2: 263-353. Correct number of domains and quite accurate domain sizes.
T0734 – 171, 45. Actual is D1 (FM): 2-214. Incorrectly ID’ed as discontinuous and 2-domain.
T0735 – 115, 94, 8, 80, 12 (1, 2, 3, 4, -). Actual is D1: 29-261, D2: 262-349. Incorrectly identified as having 4 domains and a ‘-‘ domain. 
T0737 – 182, 93, 17. Actual is D1 (FM): 176-292. Incorrectly identified as 2 domains and discontinuous, again!
T0739 – 523, 115, 132. Actual is D1: 12-96, D2: 97-154, D3: 198-580, D4: 581-769. 3 domains, when it’s actually 4 domains.
T0740 – 165. Actual is D1: 11-165. 
T0741 – 181. Actual is D1: 46-181. 
T0742 – 208, 93, 11 (1, 2, -). Actual is D1: 56-72,76-101,109-149,153-264,269-294,300-312. Incorrectly ID’ed as 2 domains and discontinuous, actually is 1 domain and continuous.
T0756 – 140, 39. Actual is D1: 3-93, D2: 94-179. 


From this a few general issues have arisen:
    1). pdp allows domains with 1 residue to exist, which shouldn't happen - there should be a minimum size for a domain.
    2). my FastaCutter program doesn't add the size of combined segments to the header of the file - I need to edit this
    3). pdp often identifies a protein as discontinuous when it's not. Occasionally 10 of the 36 proteins tested were incorrectly identified as discontinuous. Furthermore, it found it difficult to identify discontinuous domains when they actually did show up. Should see whether this relates to difficulty of the model. 
    4).  pdp identifies '-' when it can't decide what domain the protein residue is in. Sometimes it actually isn't in a domain, but often it should be in one of the adjacent domain numbers or is should be another domain - need a system for deciding this. Could edit pdp, use another software or create my own.

22/08/2013
Corrected fastacutter to give the correct file size in the split fasta file - because this involved replacing a string in place, I had to read the whole file in and overwrite it. Updated code:
outputbuf = fastabuffer.toString();
 56                     File output = new File("/home/matt/Dropbox/part_3_project/project/data/fasta_doms/" + model + "_" + prev + ".fasta");
 57                     try {
 58                         Pattern p = Pattern.compile("\\s+(\\d+)\\s+residues");
 59                         if(output.isFile()) {
 60                             Scanner wholein = new Scanner(output);
 61                             while(wholein.hasNextLine()) {
 62                                 discon_buff.append(wholein.nextLine());
 63                             }
 64                             updatedbuff = discon_buff.toString();
 65                             System.out.println(updatedbuff);
 66                             Scanner numscan = new Scanner(updatedbuff);
 67                             while(numscan.hasNextLine()) {
 68                                 numcheck = numscan.nextLine();
 69                                 Matcher m = p.matcher(numcheck);
 70                                 while(m.find()) {
 71                                     currentnum = Integer.parseInt(m.group(1));
 72                                     System.out.println("There were " + currentnum + " residues in the original");
 73                                 }
 74                             }
 75                             System.out.println(sizecount + " residues are added");
 76                             sizecount += currentnum;
 77                             System.out.println("Total number of residues = " + sizecount);
 78                             updatedbuff = updatedbuff.replaceAll("\\s+\\d+\\s+residues", " " + sizecount + " residues" + "\n");
 79                             //newheader = header.replaceAll("\\s+[0-9]+\\s+residues", " " + sizecount + " residues");
 80                             updatedbuff = updatedbuff + outputbuf;
 81                             System.out.println("The updated fasta file: " + updatedbuff);
 82                             BufferedWriter writedata = new BufferedWriter(new FileWriter(output));
 83                             writedata.write(updatedbuff);
 84                             writedata.close();
 85                             discon_buff.delete(0, discon_buff.length());
 86       
 
also researched domain cutting and assembled papers to read that may help improve pdp's predictions. 

23/08/2013
wrote perl script to run ModFOLDclust on all full chains:
  1 #!/usr/bin/perl
  2 #call this with the CASP folder containing all the directories and fasta files
  3 use strict;
  4 use 5.010;
  5 
  6 my @files;
  7 my $name;
  8 my $folder;
  9 my $fasta;
 10 
 11 say("the directory is $ARGV[0]");
 12 opendir (DIR, $ARGV[0]) or die "couldn't open the directory";
 13 while (my $file = readdir(DIR)) {
 14 #say("$file");
 15     push(@files, $file);
 16 }
 17 @files=sort(@files);
 18 #say("@files");
 19 
 20 foreach(@files) {
 21     if($_ =~ /(T\d+)\..*/) {
 22         #say("$_");
 23     } elsif($_ =~ /\./) {
 24         #say("$_");
 25     } else {
 26         #say("$_");
 27         $name = $_;
 28         $folder = "$ARGV[0]$_/";
 29         $fasta = "$ARGV[0]$_.fasta";
 30         #say("$folder, $fasta");
 31         my @args = ("-jar", "ModFOLDclust2.jar", "$name", "$fasta", "$folder");
 32         #say("@args");
 33         system("java", @args) == 0
 34             or die "failed: $?"
 35 
 36     }
 37 }

wrote another perl script to call DomCutter.java on all full chains too:
  1 #!/usr/bin/perl
  2 #call with the CASP folder and the Top models folder
  3 #used to call DomCutter.java on all of the CASP files
  4 use strict;
  5 use 5.010;
  6 
  7 my @files;
  8 my @QAfiles;
  9 my $name;
 10 my $folder;
 11 my $fasta;
 12 my $QAfolder;
 13 
 14 say("the directory is $ARGV[0]");
 15 say("the QA folder is $ARGV[1]");
 16 opendir (DIR, $ARGV[0]) or die "couldn't open the directory";
 17 opendir (QADIR, $ARGV[1]) or die "coudn't open the top QA files directory";
 18 while (my $file = readdir(DIR)) {
 19 #say("$file");
 20     push(@files, $file);
 21 }
 22 @files=sort(@files);
 23 #say("@files");
 24 
 25 #do the same for the QA folder
 26 while(my $QAfile = readdir(QADIR)) {
 27     push(@QAfiles, $QAfile);
 28 }
 29 @QAfiles = sort(@QAfiles);
 30 #say "@QAfiles";
 31 
 32 foreach(@files) {
 33     if($_ =~ /(T\d+)\..*/) {
 34         #say("$_");
 35     } elsif($_ =~ /\./) {
 36         #say("$_");
 37     } else {
 38         #say("$_");
 39         $name = $_;
 40         $folder = "$ARGV[0]$_/";
 41         $fasta = "$ARGV[0]$_.fasta";
 42         foreach(@QAfiles) {
 43             #say "$QAfolder";
 44             if($_ =~ /$name.*/) {
 45                 #say "matched to file $_";
 46                 $QAfolder = "$ARGV[1]$_";
 47                 #say "$QAfolder";
 48                 my @args = ("DomCutter", "$folder", "$name", "$QAfolder");
 49                 say "@args";
 50                 system("java", @args) == 0
 51                     or die "failed: $?"
 52             }
 53 
 54         }
 55     }
 56 }

Ran the DomCutter script to give all splitt doms. Will run ModFOLD script to get full chain predictions. Need to write another script to run ModFOLD on all split doms, then I need to extend the callTM.sh bash script so that it can do all files, not just a single dir. 

command to call callCutter.pl was perl callCutter.pl /home/matt/Dropbox/part_3_project/project/data/CASP10_server_models/ /home/matt/Dropbox/part_3_project/project/data/QAfiles/
which is perl callCutter.pl models toprankingQAfiles

command to call the ModFOLDclust2 perl script was perl callmodfold.pl /home/matt/Dropbox/part_3_project/data/CASP10_server_models/
which is perl callmodfold.pl CASPmodeldir

===============================================================================================================================================

                    LAB BOOK WAS ACCIDENTALLY DELETED - REWRITE EVERYTHING BETWEEN LAST ENTRY AND NEXT

===============================================================================================================================================


27/11/2013
altered callModFOLDclust to delete any files leftover from a partially run ModFOLDclust. Also added an array containing the targets with more than one domain according to the official definition
at http://predictioncenter.org/casp10/domains_summary.cgi accessed 27/11/2013 at 21:40pm.
the array is : T0651 T0652 T0658 T0663 T0671 T0674 T0675 ???T0677??? T0684 T0685 T0686 T0690 ???T0693??? T0705 T0713 T0717 T0719 T0724 T0726 ???T0732??? T0735 ???T0739??? T0756
files shown with question marks will be included into the script but may be excluded from the analysis (they have a - instead of a pdb link on the domain definition, so I need ot be sure the structure is official before using these)



